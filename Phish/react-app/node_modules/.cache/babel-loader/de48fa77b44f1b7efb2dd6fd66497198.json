{"ast":null,"code":"const LOAD_ALL_PRODUCTS = 'products/LOAD_ALL_PRODUCTS';\nconst LOAD_ONE_PRODUCT = 'products/LOAD_ONE_PRODUCT';\nconst ADD_PRODUCT = 'products/DD_PRODUCT';\n\nconst loadAllProducts = products => ({\n  type: LOAD_ALL_PRODUCTS,\n  products\n});\n\nconst loadOneProduct = product => ({\n  type: LOAD_ONE_PRODUCT,\n  product\n});\n\nconst addProduct = product => ({\n  type: ADD_PRODUCT,\n  product\n});\n\nexport const getProductsThunk = () => async dispatch => {\n  const response = await fetch(`/api/products`);\n\n  if (response.ok) {\n    const allProducts = await response.json();\n    dispatch(loadAllProducts(allProducts));\n    return allProducts;\n  }\n};\nexport const getOneProductThunk = productId => async dispatch => {\n  const response = await fetch(`/api/products/${productId}`);\n\n  if (response.ok) {\n    const product = await response.json();\n    dispatch(loadOneProduct(product));\n  }\n};\nexport const createProductThunk = payload => async dispatch => {\n  const respose = await fetch(`/api/products`, {\n    method: 'POST'\n  });\n};\nconst initialState = {\n  allProducts: {},\n  singleProduct: {}\n};\n\nconst productsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_ALL_PRODUCTS:\n      {\n        const allProductsState = {};\n        console.log('-----------------', action.products);\n        action.products.products.forEach(product => allProductsState[product.id] = product);\n        return { ...state,\n          allProducts: allProductsState,\n          singleProduct: {}\n        };\n      }\n\n    case LOAD_ONE_PRODUCT:\n      {\n        return { ...state,\n          singleProduct: action.product.product\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default productsReducer;","map":{"version":3,"sources":["/home/cahzzm/aug-CoHort/projects/Capstone/Phish/Phish/Phish/react-app/src/store/product.js"],"names":["LOAD_ALL_PRODUCTS","LOAD_ONE_PRODUCT","ADD_PRODUCT","loadAllProducts","products","type","loadOneProduct","product","addProduct","getProductsThunk","dispatch","response","fetch","ok","allProducts","json","getOneProductThunk","productId","createProductThunk","payload","respose","method","initialState","singleProduct","productsReducer","state","action","allProductsState","console","log","forEach","id"],"mappings":"AAEA,MAAMA,iBAAiB,GAAG,4BAA1B;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AACA,MAAMC,WAAW,GAAG,qBAApB;;AAGA,MAAMC,eAAe,GAAGC,QAAQ,KAAK;AACjCC,EAAAA,IAAI,EAAEL,iBAD2B;AAEjCI,EAAAA;AAFiC,CAAL,CAAhC;;AAKA,MAAME,cAAc,GAAGC,OAAO,KAAK;AAC/BF,EAAAA,IAAI,EAAEJ,gBADyB;AAE/BM,EAAAA;AAF+B,CAAL,CAA9B;;AAKA,MAAMC,UAAU,GAAGD,OAAO,KAAK;AAC3BF,EAAAA,IAAI,EAAEH,WADqB;AAE3BK,EAAAA;AAF2B,CAAL,CAA1B;;AAMA,OAAO,MAAME,gBAAgB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,eAAF,CAA5B;;AAEA,MAAGD,QAAQ,CAACE,EAAZ,EAAgB;AACZ,UAAMC,WAAW,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA1B;AACAL,IAAAA,QAAQ,CAACP,eAAe,CAACW,WAAD,CAAhB,CAAR;AACA,WAAOA,WAAP;AACH;AACJ,CARM;AAUP,OAAO,MAAME,kBAAkB,GAAIC,SAAD,IAAe,MAAMP,QAAN,IAAkB;AAC/D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iBAAgBK,SAAU,EAA5B,CAA5B;;AAEA,MAAGN,QAAQ,CAACE,EAAZ,EAAgB;AACZ,UAAMN,OAAO,GAAG,MAAMI,QAAQ,CAACI,IAAT,EAAtB;AACAL,IAAAA,QAAQ,CAACJ,cAAc,CAACC,OAAD,CAAf,CAAR;AACH;AACJ,CAPM;AASP,OAAO,MAAMW,kBAAkB,GAAIC,OAAD,IAAa,MAAMT,QAAN,IAAkB;AAC7D,QAAMU,OAAO,GAAG,MAAMR,KAAK,CAAE,eAAF,EAAkB;AACzCS,IAAAA,MAAM,EAAE;AADiC,GAAlB,CAA3B;AAGH,CAJM;AAOP,MAAMC,YAAY,GAAG;AACjBR,EAAAA,WAAW,EAAE,EADI;AAEjBS,EAAAA,aAAa,EAAE;AAFE,CAArB;;AAMA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACrB,IAAf;AACI,SAAKL,iBAAL;AAAwB;AACpB,cAAM2B,gBAAgB,GAAG,EAAzB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCH,MAAM,CAACtB,QAAvC;AACAsB,QAAAA,MAAM,CAACtB,QAAP,CAAgBA,QAAhB,CAAyB0B,OAAzB,CAAiCvB,OAAO,IACpCoB,gBAAgB,CAACpB,OAAO,CAACwB,EAAT,CAAhB,GAA+BxB,OADnC;AAGA,eAAO,EACH,GAAGkB,KADA;AAEHX,UAAAA,WAAW,EAAEa,gBAFV;AAGHJ,UAAAA,aAAa,EAAE;AAHZ,SAAP;AAKH;;AAED,SAAKtB,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGwB,KADA;AAEHF,UAAAA,aAAa,EAAEG,MAAM,CAACnB,OAAP,CAAeA;AAF3B,SAAP;AAIH;;AAED;AACI,aAAOkB,KAAP;AAtBR;AAwBH,CAzBD;;AA4BA,eAAeD,eAAf","sourcesContent":["\n\nconst LOAD_ALL_PRODUCTS = 'products/LOAD_ALL_PRODUCTS'\nconst LOAD_ONE_PRODUCT = 'products/LOAD_ONE_PRODUCT'\nconst ADD_PRODUCT = 'products/DD_PRODUCT'\n\n\nconst loadAllProducts = products => ({\n    type: LOAD_ALL_PRODUCTS,\n    products\n})\n\nconst loadOneProduct = product => ({\n    type: LOAD_ONE_PRODUCT,\n    product\n})\n\nconst addProduct = product => ({\n    type: ADD_PRODUCT,\n    product\n})\n\n\nexport const getProductsThunk = () => async dispatch => {\n    const response = await fetch(`/api/products`)\n\n    if(response.ok) {\n        const allProducts = await response.json()\n        dispatch(loadAllProducts(allProducts))\n        return allProducts\n    }\n}\n\nexport const getOneProductThunk = (productId) => async dispatch => {\n    const response = await fetch(`/api/products/${productId}`)\n\n    if(response.ok) {\n        const product = await response.json()\n        dispatch(loadOneProduct(product))\n    }\n}\n\nexport const createProductThunk = (payload) => async dispatch => {\n    const respose = await fetch(`/api/products`, {\n        method: 'POST',\n    })\n}\n\n\nconst initialState = {\n    allProducts: {},\n    singleProduct: {}\n}\n\n\nconst productsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_ALL_PRODUCTS: {\n            const allProductsState = {}\n            console.log('-----------------',action.products)\n            action.products.products.forEach(product => (\n                allProductsState[product.id] = product\n            ))\n            return {\n                ...state,\n                allProducts: allProductsState,\n                singleProduct: {}\n            }\n        }\n\n        case LOAD_ONE_PRODUCT: {\n            return {\n                ...state,\n                singleProduct: action.product.product\n            }\n        }\n\n        default:\n            return state\n    }\n}\n\n\nexport default productsReducer\n"]},"metadata":{},"sourceType":"module"}